
module Memory_Reader_FSM (
	iCLK,
	iRST_N,
	iDATA,

	oWE_N,
	oOE_N,
	oCE_N,
	oLB_N,
	oUB_N,
	oADDR,
	oDATA
);

input		wire	iCLK;
input 	wire	iRST_N;
input		wire	[15:0]	iDATA;

output	reg	[15:0]	oDATA;
output	reg	[19:0]	oADDR;
output	reg	oWE_N;
output	reg	oOE_N;
output	reg	oCE_N;
output	reg	oLB_N;
output	reg	oUB_N;

reg	[19:0]	Addr_Count;
reg	[2:0]		EstadoAtual;
reg	[2:0]		EstadoFuturo;

parameter	ADDR_NUM		= 307200;	// 640x480=307200

// Estados
parameter	Reset			= 3'b000;	// Reset = 0
parameter	Set_Address	= 3'b001;	// Set_Address = 1
parameter	Read_Data	= 3'b010;	// Read_data = 2

				
// Decodificador de próximo estado
always @ (EstadoAtual)
begin
	case (EstadoAtual)
		
		Reset:
			EstadoFuturo = Set_Address;

		Set_Address:
			if(Addr_Count<ADDR_NUM)
				EstadoFuturo = Read_Data;
			else
				EstadoFuturo = Reset;
			
		Read_Data:
			EstadoFuturo = Set_Address;

		default:
			EstadoFuturo = Reset;
		
	endcase

end


// Decodificador de saída
always @ (EstadoAtual)
begin
	case (EstadoAtual)
	
		Reset:
		begin
			Addr_Count = 0;
			
			oWE_N = 1'b1;
			oOE_N = 1'b0;
			oCE_N = 1'b0;
			oLB_N = 1'b0;
			oUB_N = 1'b0;
			oADDR = 20'h00000;
			oDATA = 16'h0000;
		end
		
		Set_Address:
		begin
			oWE_N = 1'b1;
			oOE_N = 1'b0;
			oCE_N = 1'b0;
			oLB_N = 1'b0;
			oUB_N = 1'b0;
			oADDR = Addr_Count;
			oDATA = iDATA;
		end
		
		Read_Data:
		begin
			Addr_Count = Addr_Count + 1'b1;
		
			oWE_N = 1'b1;
			oOE_N = 1'b0;
			oCE_N = 1'b0;
			oLB_N = 1'b0;
			oUB_N = 1'b0;
			oADDR = Addr_Count;
			oDATA = iDATA;
		end
				
		default:
		begin
			Addr_Count = 0;
			
			oWE_N = 1'b1;
			oOE_N = 1'b0;
			oCE_N = 1'b0;
			oLB_N = 1'b0;
			oUB_N = 1'b0;
			oADDR = 20'h00000;
			oDATA = 16'h0000;
		end
	
	endcase
end


// Atualização de registrador de estado e lógica de reset
always @ (posedge iCLK)
begin

	if (!iRST_N)
	begin
		EstadoAtual <= Reset;
	end
	
	else
	begin
		EstadoAtual <= EstadoFuturo;
	end
	
end

endmodule 